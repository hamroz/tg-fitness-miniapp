const { InlineKeyboard } = require('grammy');
require('dotenv').config();

/**
 * Handler for /start command - begins user onboarding
 */
function startHandler(userModel) {
    return async (ctx) => {
        const userId = ctx.from.id.toString();
        const user = await userModel.getUserById(userId);

        if (user) {
            // User already exists
            const greeting = user.language === 'en'
                ? `üëã *Welcome back, ${user.name}!*\n\nI'm your personal fitness assistant. What would you like to do today?`
                : `üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.name}!*\n\n–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?`;

            const keyboard = new InlineKeyboard()
                .text(user.language === 'en' ? 'üì± Open App' : 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'open_app')
                .row()
                .text(user.language === 'en' ? 'üìã Commands' : 'üìã –ö–æ–º–∞–Ω–¥—ã', 'show_commands')
                .row()
                .text(user.language === 'en' ? 'üèãÔ∏è Quick Workout' : 'üèãÔ∏è –ë—ã—Å—Ç—Ä–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', 'quick_workout')
                .row()
                .text(user.language === 'en' ? 'üîî Notifications' : 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'notifications_settings');

            await ctx.reply(greeting, {
                reply_markup: keyboard,
                parse_mode: 'Markdown'
            });
        } else {
            // New user - start onboarding
            await ctx.conversation.enter('onboardingConversation');
        }
    };
}

/**
 * Handler for /menu command - shows interactive menu
 */
function menuHandler(userModel) {
    return async (ctx) => {
        const userId = ctx.from.id.toString();
        const user = await userModel.getUserById(userId);
        // Default to Russian
        const language = user?.language || 'ru';

        const menuText = language === 'en'
            ? `*üì± Main Menu*\n\nChoose an option below:`
            : `*üì± –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:`;

        const keyboard = new InlineKeyboard()
            .text(language === 'en' ? 'üì± Open App' : 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'open_app')
            .row()
            .text(language === 'en' ? 'üí™ My Workouts' : 'üí™ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'my_workouts')
            .row()
            .text(language === 'en' ? 'üìä My Progress' : 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', 'my_progress')
            .row()
            .text(language === 'en' ? 'üîî Notifications' : 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'notifications_settings')
            .row()
            .text(language === 'en' ? 'üåê Language' : 'üåê –Ø–∑—ã–∫', 'show_language')
            .row()
            .text(language === 'en' ? '‚öôÔ∏è Settings' : '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')
            .row()
            .text(language === 'en' ? 'üí¨ Support' : 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support_menu');

        await ctx.reply(menuText, {
            reply_markup: keyboard,
            parse_mode: 'Markdown'
        });
    };
}

/**
 * Handler for /commands command - shows all available commands
 */
function commandsHandler(userModel) {
    return async (ctx) => {
        const userId = ctx.from.id.toString();
        const user = await userModel.getUserById(userId);
        const language = user?.language || 'ru';

        const commandsText = language === 'en'
            ? `*üìã Available Commands*

/start - Restart the bot
/menu - Show interactive menu
/commands - Show this commands list
/workout - Start a quick workout
/progress - View your fitness progress
/subscribe - View subscription options
/support - Contact our support team
/settings - Change your preferences
/notifications - Manage notification settings
/language - Change language
/help - Get help using the bot
/cancel - Cancel current operation

_Use the interactive menu for easier navigation!_`
            : `*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ö–æ–º–∞–Ω–¥—ã*

/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
/commands - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/workout - –ù–∞—á–∞—Ç—å –±—ã—Å—Ç—Ä—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
/progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å
/subscribe - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
/support - –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
/settings - –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/notifications - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
/language - –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!_`;

        await ctx.reply(commandsText, {
            parse_mode: 'Markdown'
        });
    };
}

/**
 * Handler for /help command
 */
function helpHandler(userModel) {
    return async (ctx) => {
        const userId = ctx.from.id.toString();
        const user = await userModel.getUserById(userId);
        const language = user?.language || 'ru';

        const helpText = language === 'en'
            ? `*üÜò Help & Support*

*Getting Started:*
‚Ä¢ Use /start to begin interaction with the bot
‚Ä¢ Use /menu to access the main menu
‚Ä¢ Use /commands to see all available commands

*Common Tasks:*
‚Ä¢ Track your workouts in the app or via /workout
‚Ä¢ Check your progress with /progress
‚Ä¢ Manage subscriptions with /subscribe

*Need More Help?*
Use /support to contact our team directly.

*Tip:* You can always use /cancel to exit any ongoing process.`
            : `*üÜò –ü–æ–º–æ—â—å & –ü–æ–¥–¥–µ—Ä–∂–∫–∞*

*–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /commands —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

*–ß–∞—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏:*
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ /workout
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –ø–æ–º–æ—â—å—é /progress
‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ —á–µ—Ä–µ–∑ /subscribe

*–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å?*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /support —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞–ø—Ä—è–º—É—é.

*–°–æ–≤–µ—Ç:* –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª—é–±–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.`;

        const keyboard = new InlineKeyboard()
            .text(language === 'en' ? 'üì± Open App' : 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'open_app')
            .row()
            .text(language === 'en' ? 'üí¨ Contact Support' : 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', 'support_contact')
            .row()
            .text(language === 'en' ? 'üìã Commands' : 'üìã –ö–æ–º–∞–Ω–¥—ã', 'show_commands');

        await ctx.reply(helpText, {
            reply_markup: keyboard,
            parse_mode: 'Markdown'
        });
    };
}

/**
 * Handler for /subscribe command
 */
function subscribeHandler(userModel) {
    return async (ctx) => {
        const userId = ctx.from.id.toString();
        const user = await userModel.getUserById(userId);
        const language = user?.language || 'ru';

        const currentPlan = user?.subscription || 'free';
        const planEmoji = currentPlan === 'premium' ? '‚≠ê' : (currentPlan === 'individual' ? 'üåü' : 'üîπ');

        const subscribeText = language === 'en'
            ? `*üí∞ Subscription Options*\n\n*Your current plan:* ${planEmoji} *${currentPlan.toUpperCase()}*\n\nChoose a subscription plan to view details and upgrade options:`
            : `*üí∞ –í–∞—Ä–∏–∞–Ω—Ç—ã –ü–æ–¥–ø–∏—Å–∫–∏*\n\n*–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω:* ${planEmoji} *${currentPlan.toUpperCase()}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`;

        const keyboard = new InlineKeyboard()
            .text(language === 'en' ? 'üîπ Free Plan' : 'üîπ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ü–ª–∞–Ω', 'plan_free')
            .row()
            .text(language === 'en' ? '‚≠ê Premium Plan' : '‚≠ê –ü—Ä–µ–º–∏—É–º –ü–ª–∞–Ω', 'plan_premium')
            .row()
            .text(language === 'en' ? 'üåü Individual Plan' : 'üåü –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ü–ª–∞–Ω', 'plan_individual')
            .row()
            .text(language === 'en' ? 'üì± Open App for Details' : 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'open_app');

        await ctx.reply(subscribeText, {
            reply_markup: keyboard,
            parse_mode: 'Markdown'
        });
    };
}

/**
 * Handler for /support command
 */
function supportHandler(userModel) {
    return async (ctx) => {
        const userId = ctx.from.id.toString();
        const user = await userModel.getUserById(userId);
        const language = user?.language || 'ru';

        const supportText = language === 'en'
            ? `*üí¨ Support Center*

Need help with something? Our support team is here for you!

*Options:*
‚Ä¢ Send us a message directly using this bot
‚Ä¢ Check our FAQ for quick answers
‚Ä¢ Report a technical issue`
            : `*üí¨ –¶–µ–Ω—Ç—Ä –ü–æ–¥–¥–µ—Ä–∂–∫–∏*

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–¥–µ—Å—å –¥–ª—è –≤–∞—Å!

*–í–∞—Ä–∏–∞–Ω—Ç—ã:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
‚Ä¢ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
‚Ä¢ –°–æ–æ–±—â–∏—Ç–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º–µ`;

        const keyboard = new InlineKeyboard()
            .text(language === 'en' ? 'üìù Send Message' : 'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'support_message')
            .row()
            .text(language === 'en' ? '‚ùì FAQ' : '‚ùì FAQ', 'support_faq')
            .row()
            .text(language === 'en' ? 'üêû Report Bug' : 'üêû –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ', 'support_bug');

        await ctx.reply(supportText, {
            reply_markup: keyboard,
            parse_mode: 'Markdown'
        });
    };
}

/**
 * Handler for /workout command
 * Offers quick workout options
 */
function workoutHandler(userModel) {
    return async (ctx) => {
        const userId = ctx.from.id.toString();
        const user = await userModel.getUserById(userId);
        const language = user?.language || 'ru';

        const workoutText = language === 'en'
            ? `*üèãÔ∏è Quick Workout*

Choose a workout type below or open the app for a complete workout experience:

‚Ä¢ *Quick:* 10-15 minute workout for busy days
‚Ä¢ *Medium:* 20-30 minute balanced session
‚Ä¢ *Full:* 45-60 minute complete workout`
            : `*üèãÔ∏è –ë—ã—Å—Ç—Ä–∞—è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –æ–ø—ã—Ç–∞:

‚Ä¢ *–ë—ã—Å—Ç—Ä–∞—è:* 10-15 –º–∏–Ω—É—Ç–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö –¥–Ω–µ–π
‚Ä¢ *–°—Ä–µ–¥–Ω—è—è:* 20-30 –º–∏–Ω—É—Ç–Ω–∞—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
‚Ä¢ *–ü–æ–ª–Ω–∞—è:* 45-60 –º–∏–Ω—É—Ç–Ω–∞—è –ø–æ–ª–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞`;

        const keyboard = new InlineKeyboard()
            .text(language === 'en' ? '‚ö° Quick (15 min)' : '‚ö° –ë—ã—Å—Ç—Ä–∞—è (15 –º–∏–Ω)', 'workout_quick')
            .row()
            .text(language === 'en' ? 'üîÑ Medium (30 min)' : 'üîÑ –°—Ä–µ–¥–Ω—è—è (30 –º–∏–Ω)', 'workout_medium')
            .row()
            .text(language === 'en' ? 'üí™ Full (60 min)' : 'üí™ –ü–æ–ª–Ω–∞—è (60 –º–∏–Ω)', 'workout_full')
            .row()
            .text(language === 'en' ? 'üì± Open App' : 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'open_app');

        await ctx.reply(workoutText, {
            reply_markup: keyboard,
            parse_mode: 'Markdown'
        });
    };
}

/**
 * Handler for /cancel command
 * Used to cancel ongoing operations
 */
function cancelHandler() {
    return async (ctx) => {
        // Default to Russian
        const language = 'ru';

        const cancelText = language === 'en'
            ? '‚úÖ Current operation has been cancelled. What would you like to do next?'
            : '‚úÖ –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?';

        const keyboard = new InlineKeyboard()
            .text(language === 'en' ? 'üì± Main Menu' : 'üì± –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', 'show_menu')
            .row()
            .text(language === 'en' ? 'üìã Commands' : 'üìã –ö–æ–º–∞–Ω–¥—ã', 'show_commands');

        await ctx.reply(cancelText, {
            reply_markup: keyboard
        });
    };
}

/**
 * Handler for inline button that opens the mini app
 */
function openAppHandler() {
    return async (ctx) => {
        // Default to Russian
        const language = 'ru';
        const miniAppUrl = process.env.MINI_APP_URL;

        const openMessage = language === 'en'
            ? `*üì± Opening Fitness Trainer App*\n\nClick below to open the full app experience!`
            : `*üì± –û—Ç–∫—Ä—ã—Ç–∏–µ –§–∏—Ç–Ω–µ—Å-–¢—Ä–µ–Ω–µ—Ä–∞*\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!`;

        await ctx.reply(openMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: language === 'en' ? 'üöÄ Launch App' : 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: miniAppUrl } }]
                ]
            }
        });
    };
}

/**
 * Handler for /language command
 * Shows language selection options
 */
function languageHandler(userModel) {
    return async (ctx) => {
        const userId = ctx.from.id.toString();
        const user = await userModel.getUserById(userId);
        const currentLanguage = user?.language || 'ru'; // Default to Russian

        const languageText = currentLanguage === 'en'
            ? `*üåê Language Settings*\n\nYour current language is: *English*\n\nSelect your preferred language:`
            : `*üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ø–∑—ã–∫–∞*\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫: *–†—É—Å—Å–∫–∏–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫:`;

        const keyboard = new InlineKeyboard()
            .text('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'language_ru')
            .row()
            .text('üá¨üáß English', 'language_en');

        await ctx.reply(languageText, {
            reply_markup: keyboard,
            parse_mode: 'Markdown'
        });
    };
}

/**
 * Handler for callback_query 'show_commands'
 * Shows available commands
 */
function showCommandsHandler(userModel) {
    return async (ctx) => {
        const handler = commandsHandler(userModel);
        await handler(ctx);
        await ctx.answerCallbackQuery();
    };
}

/**
 * Handler for callback_query 'show_menu'
 * Shows the main menu
 */
function showMenuHandler(userModel) {
    return async (ctx) => {
        const handler = menuHandler(userModel);
        await handler(ctx);
        await ctx.answerCallbackQuery();
    };
}

/**
 * Handler for callback_query 'show_language'
 * Shows language selection
 */
function showLanguageHandler(userModel) {
    return async (ctx) => {
        const handler = languageHandler(userModel);
        await handler(ctx);
        await ctx.answerCallbackQuery();
    };
}

module.exports = {
    startHandler,
    menuHandler,
    helpHandler,
    subscribeHandler,
    supportHandler,
    cancelHandler,
    openAppHandler,
    commandsHandler,
    workoutHandler,
    showCommandsHandler,
    showMenuHandler,
    languageHandler,
    showLanguageHandler
}; 