const { InlineKeyboard } = require('grammy');

/**
 * Onboarding conversation to collect user information
 * @param {Object} conversation - The conversation context
 * @param {Object} ctx - The bot context
 * @param {Object} userModel - The user model for database operations
 */
async function onboardingConversation(conversation, ctx, userModel) {
    // Welcome greeting with emoji and formatting in Russian
    await ctx.reply('üèãÔ∏è‚Äç‚ôÇÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏—Ç–Ω–µ—Å-–¢—Ä–µ–Ω–µ—Ä –ë–æ—Ç!* üèãÔ∏è‚Äç‚ôÄÔ∏è', {
        parse_mode: 'Markdown'
    });

    // Introduction message in Russian
    await ctx.reply("–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Ç–≤–æ–∏—Ö —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª–µ–π! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.", {
        parse_mode: 'Markdown'
    });

    // Ask for name with emoji in Russian
    await ctx.reply('üëã *–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?*', {
        parse_mode: 'Markdown'
    });
    const nameResponse = await conversation.wait();
    const name = nameResponse.message.text;

    // Acknowledge name in Russian
    await ctx.reply(`–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, *${name}*! üòä`, {
        parse_mode: 'Markdown'
    });

    // Ask for fitness goals with attractive buttons in Russian
    await ctx.reply('üí™ *–ö–∞–∫–∞—è —É —Ç–µ–±—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª—å?*', {
        parse_mode: 'Markdown'
    });

    const goalsKeyboard = new InlineKeyboard()
        .text('üî• –ü–æ—Ö—É–¥–µ–Ω–∏–µ', 'goal_weight_loss')
        .row()
        .text('üí™ –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã', 'goal_muscle_gain')
        .row()
        .text('‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã', 'goal_maintenance');

    await ctx.reply('–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å:', {
        reply_markup: goalsKeyboard
    });

    const goalsResponse = await conversation.wait();
    let goals;

    if (goalsResponse.callbackQuery) {
        const data = goalsResponse.callbackQuery.data;
        if (data === 'goal_weight_loss') {
            goals = 'weight_loss';
            await ctx.reply('üî• *–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!* –ü–æ—Ö—É–¥–µ–Ω–∏–µ - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è —Ü–µ–ª—å. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∂–µ—á—å —ç—Ç–∏ –∫–∞–ª–æ—Ä–∏–∏!', {
                parse_mode: 'Markdown'
            });
        } else if (data === 'goal_muscle_gain') {
            goals = 'muscle_gain';
            await ctx.reply('üí™ *–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!* –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã - —ç—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞—Ä–∞—Å—Ç–∏—Ç—å —Å–∏–ª—É!', {
                parse_mode: 'Markdown'
            });
        } else {
            goals = 'maintenance';
            await ctx.reply('‚öñÔ∏è *–ò–¥–µ–∞–ª—å–Ω–æ!* –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã - —ç—Ç–æ —É–º–Ω–∞—è —Ü–µ–ª—å. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –æ—Ç–ª–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ!', {
                parse_mode: 'Markdown'
            });
        }
    } else {
        // In case they typed their goal instead of using the keyboard
        goals = goalsResponse.message.text;
        await ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! *${goals}* - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ü–µ–ª—å. –ú—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º –≤–º–µ—Å—Ç–µ!`, {
            parse_mode: 'Markdown'
        });
    }

    // Ask for preferred language with flag emojis (Russian first)
    const languageKeyboard = new InlineKeyboard()
        .text('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru')
        .row()
        .text('üá¨üáß English', 'lang_en');

    await ctx.reply('üåê *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫:*\n(–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –†—É—Å—Å–∫–∏–π)', {
        parse_mode: 'Markdown',
        reply_markup: languageKeyboard
    });

    const languageResponse = await conversation.wait();
    // Default to Russian unless specifically selected English
    let language = 'ru';

    if (languageResponse.callbackQuery) {
        language = languageResponse.callbackQuery.data === 'lang_en' ? 'en' : 'ru';
        // Acknowledge language choice with appropriate language
        if (language === 'en') {
            await ctx.reply('üá¨üáß *English selected!* All future messages will be in English.', {
                parse_mode: 'Markdown'
            });
        } else {
            await ctx.reply('üá∑üá∫ *–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫!* –í—Å–µ –±—É–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º.', {
                parse_mode: 'Markdown'
            });
        }
    } else {
        // If they typed, still default to Russian unless explicitly mentioned English
        if (languageResponse.message.text.toLowerCase().includes('english')) {
            language = 'en';
            await ctx.reply('üá¨üáß *English selected!* All future messages will be in English.', {
                parse_mode: 'Markdown'
            });
        } else {
            await ctx.reply('üá∑üá∫ *–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫!* –í—Å–µ –±—É–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º.', {
                parse_mode: 'Markdown'
            });
        }
    }

    // Show progress indicator in Russian by default
    const progressText = language === 'en'
        ? '‚è≥ Creating your personalized fitness profile...'
        : '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–æ—Ñ–∏–ª—è...';
    await ctx.reply(progressText);

    // Save user to database
    const userId = ctx.from.id.toString();
    await userModel.createUser({
        userId,
        name,
        goals,
        language,
        subscription: 'free'
    });

    // Thank the user with appropriate language
    const thankYouText = language === 'en'
        ? `‚úÖ *Profile Created Successfully!*\n\nThank you, ${name}!\n\nYour personalized fitness journey begins now. Use the buttons below to get started.`
        : `‚úÖ *–ü—Ä–æ—Ñ–∏–ª—å –£—Å–ø–µ—à–Ω–æ –°–æ–∑–¥–∞–Ω!*\n\n–°–ø–∞—Å–∏–±–æ, ${name}!\n\n–í–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–∏—Ç–Ω–µ—Å-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.`;

    // Include more comprehensive button options
    const buttonsText = language === 'en'
        ? ['üì± Open App', 'üìã Show Commands', 'üí™ Start Workout']
        : ['üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã', 'üí™ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'];

    const miniAppKeyboard = new InlineKeyboard()
        .text(buttonsText[0], 'open_app')
        .row()
        .text(buttonsText[1], 'show_commands')
        .row()
        .text(buttonsText[2], 'quick_workout');

    await ctx.reply(thankYouText, {
        parse_mode: 'Markdown',
        reply_markup: miniAppKeyboard
    });

    // Final instructions
    const finalText = language === 'en'
        ? `*Quick Tips:*\n‚Ä¢ Use /menu anytime to see main options\n‚Ä¢ Use /help if you need assistance\n‚Ä¢ Track your workouts for best results!`
        : `*–ë—ã—Å—Ç—Ä—ã–µ –°–æ–≤–µ—Ç—ã:*\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø—Ü–∏–π\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!`;

    await ctx.reply(finalText, {
        parse_mode: 'Markdown'
    });
}

module.exports = onboardingConversation; 